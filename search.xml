<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔记分享</title>
      <link href="/Blog/2024/07/04/%E7%AC%94%E8%AE%B0%E5%88%86%E4%BA%AB/"/>
      <url>/Blog/2024/07/04/%E7%AC%94%E8%AE%B0%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\css\APlayer.min.css"><script src="\Blog\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\js\Meting.min.js"></script><div class="flink">  <script>    (() => {      const replaceSymbol = (str) => {        return str.replace(/[\p{P}\p{S}]/gu, "-");      };      let result = "";      const add = (str) => {        for (let i = 0; i < str.length; i++) {          const replaceClassName = replaceSymbol(str[i].class_name);          const className = str[i].class_name            ? `<h2 id="${replaceClassName}"><a href="#${replaceClassName}" class="headerlink" title="${str[i].class_name}"></a>${str[i].class_name}</h2>`            : "";          const classDesc = str[i].class_desc            ? `<div class="flink-desc">${str[i].class_desc}</div>`            : "";          let listResult = "";          const lists = str[i].link_list;          <!-- 随机排序 -->          if (false) {            lists.sort(() => Math.random() - 0.5);          }          for (let j = 0; j < lists.length; j++) {            listResult += `          <div class="flink-list-item">            <a href="${lists[j].link}" title="${lists[j].name}" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="${lists[j].avatar}" onerror='this.onerror=null;this.src="/Blog/img/friend_404.gif"' alt="${lists[j].name}" />              </div>              <div class="flink-item-name">${lists[j].name}</div>              <div class="flink-item-desc" title="${lists[j].descr}">${lists[j].descr}</div>            </a>          </div>`;          }          result += `${className}${classDesc} <div class="flink-list">${listResult}</div>`;        }        document          .querySelector(".flink")          .insertAdjacentHTML("afterbegin", result);        window.lazyLoadInstance && window.lazyLoadInstance.update();      };    const linkData = [{        "class_name": "Java",        "class_desc": "",        "link_list": [{            "name": "JavaSE",            "link": "https://www.yuque.com/boluochuixue-mpagz/fftqtw",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「JavaSE + Java新特性」"        }, {            "name": "JavaEE",            "link": "",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「敬请期待...」"        }]    }, {        "class_name": "必学技术与中间件",        "class_desc": "",        "link_list": [{            "name": "MySQL",            "link": "https://www.yuque.com/boluochuixue-mpagz/dog2h2?",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「MySQL基础知识」",        }, {            "name": "Git",            "link": "https://www.yuque.com/boluochuixue-mpagz/deehi3",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「Git入门 + 报错解决」",        }, {            "name": "QT",            "link": "https://www.yuque.com/boluochuixue-mpagz/mm3f2z",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「QT基础知识」",        }]    }, {        "class_name": "Computer Version",        "class_desc": "",        "link_list": [{            "name": "深度学习",            "link": "https://www.yuque.com/boluochuixue-mpagz/odhhtb",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「DL笔记」",        }, {            "name": "论文阅读与复现",            "link": "https://www.yuque.com/boluochuixue-mpagz/yclv9g",            "avatar": "/Blog/img/default_img.jpg",            "descr": "「论文阅读 & 代码复现」",        }]    }]    if (false) {        fetch("/Blog/").then(response=>response.json()).then(add)    } else if (linkData) {        add(linkData)    }})()</script></div>                    ]]></content>
      
      
      <categories>
          
          <category> 笔记分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/Blog/2024/07/01/test/"/>
      <url>/Blog/2024/07/01/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\css\APlayer.min.css"><script src="\Blog\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\js\Meting.min.js"></script><h1 id="这是一篇测试文章…"><a href="#这是一篇测试文章…" class="headerlink" title="这是一篇测试文章…"></a>这是一篇测试文章…</h1><linkrel="stylesheet"href="http://aciano.top/redirect/?target=https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.css"> <scriptsrc="http://aciano.top/redirect/?target=https://cdn.jsdelivr.net/npm/aplayer@1.10/dist/APlayer.min.js"></script> <scriptsrc="http://aciano.top/redirect/?target=https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js"></script>     <div id="aplayer-PETcuJUy" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1386604074" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="1000px" data-preload="auto" data-theme="#555"    ></div>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本站的阅读指南</title>
      <link href="/Blog/2024/06/30/%E7%9B%AE%E5%BD%95/"/>
      <url>/Blog/2024/06/30/%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\css\APlayer.min.css"><script src="\Blog\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\js\Meting.min.js"></script><h1 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h1><h2 id="YOLOv8的使用"><a href="#YOLOv8的使用" class="headerlink" title="YOLOv8的使用"></a>YOLOv8的使用</h2><ul><li><a href="http://localhost:4000/Blog/2024/06/28/YOLOv8-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">环境配置</a></li><li><a href="http://localhost:4000/Blog/2024/06/28/YOLOv8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B9%B6%E8%AE%AD%E7%BB%83/">自定义数据集并训练</a></li><li><a href="http://localhost:4000/Blog/2024/06/28/YOLOv8-%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/">使用服务器训练模型</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv8 - 使用服务器训练模型</title>
      <link href="/Blog/2024/06/28/YOLOv8-%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/Blog/2024/06/28/YOLOv8-%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\css\APlayer.min.css"><script src="\Blog\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\js\Meting.min.js"></script><ul><li>训练网站：<br><a href="https://www.gpushare.com/center/console">恒源云_GPUSHARE-恒源智享云</a></li><li>用户文档：<br><a href="https://gpushare.com/docs/best_practices/train/">训练指引 - 恒源云用户文档</a><br><a href="https://xie.infoq.cn/article/32b709e6ac9ff73a2ca096a56">恒源云(GpuShare)_GPU租用保姆级教程，助力深度学习训练！_恒源云_InfoQ写作社区</a></li><li>常见问题：<br><a href="https://gpushare.com/docs/faq/instance/#sshssh">实例相关 - 恒源云用户文档</a></li><li>使用流程：<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291307357.png" alt="image.png"></li></ul><h1 id="本地下载并安装-FileZilla"><a href="#本地下载并安装-FileZilla" class="headerlink" title="本地下载并安装 FileZilla"></a>本地下载并安装 FileZilla</h1><p>进入官网，按照下图顺序，下载FileZilla<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291307301.png" alt="image.png"></p><h1 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h1><p>创建实例后，如下图选择即可：<img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291307261.png" alt="image.png"></p><h1 id="使用-FileZilla-上传数据"><a href="#使用-FileZilla-上传数据" class="headerlink" title="使用 FileZilla 上传数据"></a>使用 FileZilla 上传数据</h1><p><strong>1.打开FIleZilla图形化客户端</strong> 双击打开FileZilla图形化客户端<br><strong>2.点击文件-&gt;站点管理器</strong><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309171.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501190619-027c091b-3e9d-4d65-890a-780f2e102c43.png#averageHue=%23efcf87&clientId=uf97204aa-848d-4&from=paste&id=ue8f43399&originHeight=1356&originWidth=2062&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u6aa02434-0085-4cc9-83bb-afe1949404b&title="></a><br><strong>3.点击新站点-选择SFTP协议</strong><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309129.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501190631-2c625339-73e9-4c4a-b144-d17864947ec5.png#averageHue=%23f0eeee&clientId=uf97204aa-848d-4&from=paste&id=u826559a9&originHeight=948&originWidth=1708&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=uc541d2c5-ec7a-448e-890f-c47fb76997e&title="></a><br><strong>4.输入主机、端口、用户、密码</strong> 登录类型选择：正常</p><blockquote><p>获取主机名、端口、用户名、密码<br>打开<a href="https://gpushare.com/center/hire">恒源云控制台</a>，复制登录指令和密码（点击复制按钮），然后粘贴到文本或编辑器中。<a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309955.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501442669-1c594928-bd90-434c-b14e-20d5611b75b5.png#averageHue=%23f7fdfc&clientId=uf97204aa-848d-4&from=paste&id=u6fe26c9f&originHeight=575&originWidth=2554&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u4aad91c8-17e4-431f-9b91-6a8cfa52734&title="></a><br>粘贴完成后如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录指令：ssh -p 6666 root@i-1.gpushare.com</span><br><span class="line">密码：vKExWbBWnVkszkwaFdh4cPABADSNFGuS</span><br></pre></td></tr></table></figure><p>则命令拆解如下：</p><ul><li>实例SSH主机名：i-1.gpushare.com</li><li>实例SSH端口号：6666</li><li>实例用户名：root</li><li>实例密码：vKExWbBWnVkszkwaFdh4cXXXXXXXXXXX</li></ul></blockquote><p><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309910.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501190579-e4c51096-26df-401f-85d9-d5c7bf4e5a90.png#averageHue=%23efebea&clientId=uf97204aa-848d-4&from=paste&id=uecb3764a&originHeight=948&originWidth=1708&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=udfd0fa2a-0f73-45f7-a7c2-7ecbca3e7e3&title="></a>然后点击连接<br><strong>5.红色框中的目录是实例中的目录，绿色框中的目录为您电脑本地目录</strong><br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309864.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501190878-461c06e9-f37a-4f98-98d2-3d4ae7cf0bff.png#averageHue=%23f5f4f4&clientId=uf97204aa-848d-4&from=paste&id=u45d3fe87&originHeight=1880&originWidth=2934&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u64b04fcc-1fb8-4099-86f2-dc2e21c6fb0&title="></a><br><strong>6.进入实例中的&#x2F;hy-tmp目录</strong><br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309808.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501190845-a8e41ba8-8c5b-4049-9f69-e2a6560cb6f5.png#averageHue=%23f7f6f6&clientId=uf97204aa-848d-4&from=paste&id=ubcfae80e&originHeight=1900&originWidth=2946&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u1a4c5040-2a30-47ec-83de-8d2c58e9054&title="></a><br><strong>7.将本地数据传输到实例中。</strong><br><strong>本地数据指包含数据集的 Ultralytics 的压缩包。</strong><br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309755.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715501196264-80e2b611-d625-4742-a00c-7b4472c73303.png#averageHue=%23f8f7f6&clientId=uf97204aa-848d-4&from=paste&id=u5555449b&originHeight=1790&originWidth=2950&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=uc3217936-a82b-4bfa-9ad4-b4edea0476b&title="></a></p><h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><p>当创建实例并启动后，可以在实例列表中点击链接打开 <strong>JupyterLab</strong>。<br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291309718.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715504117775-98e95600-9319-4772-9326-4430f02a4c0f.png#averageHue=%2382cc8f&clientId=ubc91e51b-a4af-4&from=paste&id=u56e560f8&originHeight=795&originWidth=1355&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u1492bdc8-13a7-4046-9669-0ffeb06f344&title="></a><br>打开后进入到启动页。左侧为文件浏览器，可以对实例内的所有文件。右侧为工作区域。<br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316450.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715504117739-5a94cb99-cbdf-4d24-8f33-f2f31790fa44.png#averageHue=%23f7f7f7&clientId=ubc91e51b-a4af-4&from=paste&id=u9a6a5172&originHeight=795&originWidth=1355&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u01dc9cf6-5203-4af2-a7de-775d0f1060c&title="></a><br>默认提供的 <strong>JupyterLab</strong> 为中文汉化界面，可以在菜单 <strong>设置</strong> - <strong>语言</strong> 调整为英语界面。<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316404.png"></p><h2 id="运行终端"><a href="#运行终端" class="headerlink" title="运行终端"></a>运行终端</h2><p>在启动页中点击 <strong>其他</strong> - <strong>终端</strong> 新建终端。或在菜单中 <strong>文件</strong> - <strong>新建</strong> - <strong>终端</strong> 创建终端。<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316361.png"><br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316316.png"><br>打开终端页后可以直接执行命令。<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316272.png"><br>使用完成后在终端内执行 logout 或 Ctrl + D 来正常退出终端。<br>如果直接关闭了终端的窗口，这个终端仍然会在后台继续运行，包括在正在执行的命令任务。想找回之前关闭的终端窗口，可以在左侧菜单栏点击 <strong>正在运行终端和内核</strong> 按钮，查看运行中的终端。<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316217.png"><br>点击正在运行的终端可以重新打开这个终端的标签页。当显示空白可以输入 Enter 来打印一次终端提示符。<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316169.png"></p><h2 id="解压个人数据"><a href="#解压个人数据" class="headerlink" title="解压个人数据"></a>解压个人数据</h2><p>先进入个人数据存放文件夹（hy-tmp）:<code>cd hy-tmp</code><br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316123.png" alt="image.png"><br>然后解压：<code>unzip ultralytics-8.0.48.zip</code><br>然后进入加压后文件夹：<img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291321064.png" alt="image.png"></p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>下载 ultralytics-xxx、requirements.txt</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install ultralytics==8.0.48</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><blockquote><p>可能的报错 ①<br>报错信息：<br><code>pip._vendor.urllib3.exceptions.ProtocolError: (&quot;Connection broken: ConnectionResetError(104, &#39;Connection reset by peer&#39;)&quot;, ConnectionResetError(104, &#39;Connection reset by peer&#39;))</code></p><p>解决方案：<br>重新创建示例，更换 pytorch 版本：1.13.1</p></blockquote><blockquote><p>可能出现的报错 ②<br>报错信息：<br><code>WARNING: Running pip as the &#39;root&#39; user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: [https://pip.pypa.io/warnings/venv](https://pip.pypa.io/warnings/venv)</code></p><p>解决方案：创建虚拟环境<br><code>conda create -n myenv python=3.8</code><br><code>conda activate myenv</code><br>然后再部署环境</p></blockquote><h2 id="命令行训练"><a href="#命令行训练" class="headerlink" title="命令行训练"></a>命令行训练</h2><p>在终端输入命令行进行训练<br><code>yolo task=detect mode=train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=200 imgsz=640 resume=True</code></p><blockquote><p>可能的报错报错信息：<br><code>FileNotFoundError: </code><br><code>Dataset &#39;datasets/data.yaml&#39; not found ⚠️, missing paths [&#39;/hy-tmp/ultralytics-8.0.48/datasets/datasets/datasets/valid/images&#39;]</code></p><p>解决：<br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316123.png" alt="image.png"></p></blockquote><h1 id="下载结果"><a href="#下载结果" class="headerlink" title="下载结果"></a>下载结果</h1><p><strong>1.通过FIleZilla客户端连接站点</strong><br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316082.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715517903274-1ef68a2a-eeb9-4877-87e3-7b856eac253b.png#averageHue=%23efebea&clientId=u948cb39e-23f0-4&from=paste&id=u23a64e86&originHeight=948&originWidth=1708&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=ue22ce5c0-8008-4da4-a108-72cc1936ba3&title="></a><br><strong>2.进入实例&#x2F;hy-tmp&#x2F;目录</strong><br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316037.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715517903604-a07fa841-5452-4acf-83c5-1b2162b46208.png#averageHue=%23f6f6f5&clientId=u948cb39e-23f0-4&from=paste&id=u17bf58d8&originHeight=1910&originWidth=2940&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=uae0f288b-2b6c-48fe-8c25-1a043bab841&title="></a><br><strong>3.将实例&#x2F;hy-tmp&#x2F;目录中的数据下载到本地电脑</strong><br><a href="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/202406291316994.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1715517903148-d192a59d-1eac-4be1-87cb-8f0d7b199021.png#averageHue=%23f9f8f7&clientId=u948cb39e-23f0-4&from=paste&id=u30934ff1&originHeight=1294&originWidth=2956&originalType=url&ratio=1.25&rotation=0&showTitle=false&status=done&style=none&taskId=u6c92e411-0833-4168-9e4a-b27c79b0ae5&title="></a></p><h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><ol><li><a href="/Blog/2024/06/28/YOLOv8-%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/" title="YOLOv8 - 使用服务器训练模型">YOLOv8 - 使用服务器训练模型</a></li><li><a href="/Blog/2024/06/28/YOLOv8-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" title="YOLOv8 - 环境配置">YOLOv8 - 环境配置</a></li><li><a href="/Blog/2024/06/28/YOLOv8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B9%B6%E8%AE%AD%E7%BB%83/" title="YOLOv8 - 自定义数据集并训练">YOLOv8 - 自定义数据集并训练</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLOv8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv8 - 自定义数据集并训练</title>
      <link href="/Blog/2024/06/28/YOLOv8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B9%B6%E8%AE%AD%E7%BB%83/"/>
      <url>/Blog/2024/06/28/YOLOv8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B9%B6%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\css\APlayer.min.css"><script src="\Blog\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\js\Meting.min.js"></script><p>参考视频：<br /><a href="https://www.bilibili.com/video/BV1fY411y7Xq/">【yolov8】从0开始搭建部署YOLOv8，环境安装+推理+自定义数据集搭建与训练，一小时掌握_哔哩哔哩_bilibili</a></p><blockquote><p>本文参考以上视频第5部分</p></blockquote><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="配置文件：default-yaml"><a href="#配置文件：default-yaml" class="headerlink" title="配置文件：default.yaml"></a>配置文件：default.yaml</h2><p>YOLOv8持续更新，项目结构会有变化<br />快捷查找配置文件方式：<code>ctrl+shift+N</code>，然后选择所有或文件，之后输入default搜索即可<br />default.yaml中参数可以写在yolo CLI中</p><h2 id="推理命令："><a href="#推理命令：" class="headerlink" title="推理命令："></a>推理命令：</h2><p><code>yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source=&#39;...&#39;</code><br /><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.0.png" alt="image.png"><br>task：任务<br />mode：模式<br />model：选择自己训练的模型或官方模型<br />conf：置信度<br />source：图片&#x2F;视频路径</p><h1 id="数据集的结构与制作"><a href="#数据集的结构与制作" class="headerlink" title="数据集的结构与制作"></a>数据集的结构与制作</h1><h2 id="datasets文件结构"><a href="#datasets文件结构" class="headerlink" title="datasets文件结构"></a>datasets文件结构</h2><p><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.1.png" alt="image.png"><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.2.png" alt="image.png"></p><blockquote><p>数据结构<br>datasets<br>│<br>├─ test<br>│ ├─ images<br>│ │ └─ ······<br>│ └─ labels<br>│ └─ ······<br>│<br>├─ train<br>│ ├─ images<br>│ │ └─ ······<br>│ └─ labels<br>│ └─ ······<br>│<br>├─ valid<br>│ ├─ images<br>│ │ └─ ······<br>│ └─ labels<br>│ └─ ······<br>│<br>├─ data.yaml<br>└─ yolov8n.yaml</p></blockquote><p>yolov8.yaml：从官网拉取下来的yolov8项目中包含，复制到datasets文件夹下面即可。<br />data.yaml内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">../datasets/train/images</span> <span class="comment"># 此处建议写绝对路径</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">../datasets/valid/images</span></span><br><span class="line"><span class="attr">test:</span> <span class="string">../datasets/test/images</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nc:</span> <span class="number">2</span> <span class="comment"># 该数据集中类的个数，一定写对，否则报错</span></span><br><span class="line"><span class="comment"># Classes</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">0:</span> <span class="string">person</span> <span class="comment"># 每个类对应的名称</span></span><br><span class="line">  <span class="attr">1:</span> <span class="string">bicycle</span></span><br></pre></td></tr></table></figure><h2 id="标注格式转换"><a href="#标注格式转换" class="headerlink" title="标注格式转换"></a>标注格式转换</h2><blockquote><p>yolov8只支持txt类型标注！！见官网原文</p></blockquote><p>参考文档：<br /><a href="https://blog.csdn.net/fisheryjn/article/details/133884219">目标检测，将xml格式的标签数据集转换为yolov8(txt)格式_xwyd转yolo格式-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">source_path = <span class="string">&#x27;D:/source/label/path/&#x27;</span></span><br><span class="line">label_path = <span class="string">&#x27;D:/new/label/path&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建txt标签存放路径</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(label_path):</span><br><span class="line">    os.mkdir(label_path)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#获取文件名称列表</span></span><br><span class="line">files = os.listdir(source_path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取分类名称列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_classes</span>(<span class="params">files,source_path</span>):</span><br><span class="line">    class_set = <span class="built_in">set</span>([])</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(source_path+file,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fb:</span><br><span class="line">            <span class="comment">#解析xml文件</span></span><br><span class="line">            xml = etree.HTML(fb.read())</span><br><span class="line">            labels = xml.xpath(<span class="string">&#x27;//object&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">                name = label.xpath(<span class="string">&#x27;./name/text()&#x27;</span>)[<span class="number">0</span>] </span><br><span class="line">                class_set.add(name)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(class_set)</span><br><span class="line"> </span><br><span class="line">classes = get_classes(files,source_path)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#生成分类字典，列如&#123;&#x27;apple&#x27;:0,&#x27;banana&#x27;:1&#125;</span></span><br><span class="line">class_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(classes,<span class="built_in">range</span>(<span class="built_in">len</span>(classes))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_xml2txt</span>(<span class="params">file_name,source_path,label_path,class_dict,norm=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment">#创建txt文件，并打开、写入</span></span><br><span class="line">    new_name = file_name.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(label_path+<span class="string">&#x27;/&#x27;</span>+new_name,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(source_path+file_name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fb:</span><br><span class="line">        <span class="comment">#开始解析xml文件，获取图像尺寸</span></span><br><span class="line">        xml = etree.HTML(fb.read())</span><br><span class="line">        width = <span class="built_in">int</span>(xml.xpath(<span class="string">&#x27;//size/width/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        height = <span class="built_in">int</span>(xml.xpath(<span class="string">&#x27;//size/height/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#获取对象标签</span></span><br><span class="line">        labels = xml.xpath(<span class="string">&#x27;//object&#x27;</span>) <span class="comment">#单张图片中的目标数量 len(labels)</span></span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">            name = label.xpath(<span class="string">&#x27;./name/text()&#x27;</span>)[<span class="number">0</span>]         </span><br><span class="line">            label_class = class_dict[name]</span><br><span class="line">            xmin = <span class="built_in">int</span>(label.xpath(<span class="string">&#x27;./bndbox/xmin/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">            xmax = <span class="built_in">int</span>(label.xpath(<span class="string">&#x27;./bndbox/xmax/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">            ymin = <span class="built_in">int</span>(label.xpath(<span class="string">&#x27;./bndbox/ymin/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">            ymax = <span class="built_in">int</span>(label.xpath(<span class="string">&#x27;./bndbox/ymax/text()&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line">            <span class="comment">#xyxy--&gt;xywh,且归一化</span></span><br><span class="line">            <span class="keyword">if</span> norm :</span><br><span class="line">                dw = <span class="number">1</span> / width</span><br><span class="line">                dh = <span class="number">1</span> / height</span><br><span class="line">                x_center = (xmin + xmax) / <span class="number">2</span></span><br><span class="line">                y_center = (ymax + ymin) / <span class="number">2</span></span><br><span class="line">                w = (xmax - xmin)</span><br><span class="line">                h = (ymax - ymin)</span><br><span class="line">                x, y, w, h = x_center * dw, y_center * dh, w * dw, h * dh</span><br><span class="line">                f.write(<span class="built_in">str</span>(label_class)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(x)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(y)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(w)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(h)+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#关闭文件</span></span><br><span class="line">    f.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    convert_xml2txt(file,source_path,label_path,class_dict,norm=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="将数据集划分为test，train，valid"><a href="#将数据集划分为test，train，valid" class="headerlink" title="将数据集划分为test，train，valid"></a>将数据集划分为test，train，valid</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 images 文件夹路径</span></span><br><span class="line">image_dir = <span class="string">&quot;D:/datasets/coco128/images&quot;</span></span><br><span class="line"><span class="comment"># 指定 labels 文件夹路径</span></span><br><span class="line">label_dir = <span class="string">&quot;D:/datasets/coco128/labels&quot;</span></span><br><span class="line"><span class="comment"># 创建一个空列表来存储有效图片的路径</span></span><br><span class="line">valid_images = []</span><br><span class="line"><span class="comment"># 创建一个空列表来存储有效 label 的路径</span></span><br><span class="line">valid_labels = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 images 文件夹下的所有图片</span></span><br><span class="line"><span class="keyword">for</span> image_name <span class="keyword">in</span> os.listdir(image_dir):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图片的完整路径</span></span><br><span class="line">    image_path = os.path.join(image_dir, image_name)</span><br><span class="line">    <span class="comment"># 获取图片文件的扩展名</span></span><br><span class="line">    ext = os.path.splitext(image_name)[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 根据扩展名替换成对应的 label 文件名</span></span><br><span class="line">    label_name = image_name.replace(ext, <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取对应 label 的完整路径</span></span><br><span class="line">    label_path = os.path.join(label_dir, label_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断 label 是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(label_path):</span><br><span class="line">        <span class="comment"># 删除图片</span></span><br><span class="line">        <span class="comment"># os.remove(image_path)</span></span><br><span class="line">        <span class="comment"># print(&quot;deleted:&quot;, image_path)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;delete&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 将图片路径添加到列表中</span></span><br><span class="line">        valid_images.append(image_path)</span><br><span class="line">        <span class="comment"># 将label路径添加到列表中</span></span><br><span class="line">        valid_labels.append(label_path)</span><br><span class="line">        <span class="comment"># print(&quot;valid:&quot;, image_path, label_path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个有效图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(valid_images))):</span><br><span class="line">    image_path = valid_images[i]</span><br><span class="line">    label_path = valid_labels[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机生成一个概率</span></span><br><span class="line">    r = random.random()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断图片应该移动到哪个文件夹</span></span><br><span class="line">    <span class="comment"># train：valid：test = 7:2:1</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0.1</span>:</span><br><span class="line">        <span class="comment"># 移动到 test 文件夹</span></span><br><span class="line">        destination = <span class="string">&quot;D:/Pycharm/ultralytics-main/datasets/test&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> r &lt; <span class="number">0.2</span>:</span><br><span class="line">        <span class="comment"># 移动到 valid 文件夹</span></span><br><span class="line">        destination = <span class="string">&quot;D:/Pycharm/ultralytics-main/datasets/valid&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 移动到 train 文件夹</span></span><br><span class="line">        destination = <span class="string">&quot;D:/Pycharm/ultralytics-main/datasets/train&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成目标文件夹中图片的新路径</span></span><br><span class="line">    image_destination_path = os.path.join(destination, <span class="string">&quot;images&quot;</span>, os.path.basename(image_path))</span><br><span class="line">    <span class="comment"># 移动图片到目标文件夹</span></span><br><span class="line">    os.rename(image_path, image_destination_path)</span><br><span class="line">    <span class="comment"># 生成目标文件夹中 label 的新路径</span></span><br><span class="line">    label_destination_path = os.path.join(destination, <span class="string">&quot;labels&quot;</span>, os.path.basename(label_path))</span><br><span class="line">    <span class="comment"># 移动 label 到目标文件夹</span></span><br><span class="line">    os.rename(label_path, label_destination_path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;valid images:&quot;</span>, valid_images)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出有效label路径列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;valid labels:&quot;</span>, valid_labels)</span><br></pre></td></tr></table></figure><blockquote><p>注1：想使用以上划分代码，则必须严格遵守本文datasets文件结构<br>注2：填写正确的数据集路径，如images文件夹下可能还有子文件夹而非直接是图片文件，labels同理</p></blockquote><h1 id="用自定义数据集训练"><a href="#用自定义数据集训练" class="headerlink" title="用自定义数据集训练"></a>用自定义数据集训练</h1><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><ol><li><p>开始训练：</p><p> <code>yolo task=detect mode=train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=10000 imgsz=640 resume=True workers=2 batch=16 amp=False</code><br> <code>yolo task=detect mode=train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True workers=2 batch=16 amp=False</code></p></li></ol><blockquote><p>可能出现的问题 ①<br>终端中可能显示正在等待下载Arial.ttf，则点击其后的网站下载该文件即可。</p></blockquote><blockquote><p>可能出现的问题 ②<br><code>WARNING No labels found in D:\Pycharm\ultralytics-main\datasets\train\labels.cache, training may not work correctly.</code><br />查看数据集标注是否为txt类型。</p></blockquote><blockquote><p>可能出现的问题 ③<br><code>WARNING No labels found in D:\Pycharm\ultralytics-main\datasets\train\labels.cache, training may not work correctly.</code></p></blockquote><blockquote><p>可能出现的问题 ④<br>训练过程中数值出现nan：<br /><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.3.png" alt="image.png"><br />这是有问题的，正常应该是一个数值:<br /><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.4.png" alt="image.png"><br />解决方案：<br>① 设置batch，慢慢试，一般缩小，我使用16可以正常训练<br />② 设置<code>amp=false</code><br />参考文档：<br /><a href="https://blog.csdn.net/weixin_42283539/article/details/129988766">yolov5和yolov8在train时，出现box_loss、cls_loss、dfl_loss为nan，Box(P R mAP50 mAP50-95)为0的解决办法-CSDN博客</a></p></blockquote><ol start="2"><li><p>中断训练：按下Ctrl+C键来手动停止训练</p></li><li><p>中断续训：</p><p> 将来自内容根的路径填入model中（注：填写last.pt的路径）<br> <code>yolo task=detect mode=train model=runs/detect/train/weights/last.pt epochs=500 imgsz=640 resume=True workers=2</code><br> <code>yolo task=detect mode=val model=runs/detect/train/weights/last.pt&lt;br /&gt;yolo detect val model=./runs/detect/train/weights/best.pt</code></p></li></ol><p><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.5.png" alt="获取来自内容根的路径" title="获取来自内容根的路径"></p><h2 id="利用模型推理"><a href="#利用模型推理" class="headerlink" title="利用模型推理"></a>利用模型推理</h2><p>填写best.pt的路径到model中<br><code>yolo task=detect mode=predict model=runs/detect/train/weights/best.pt conf=0.25 source=&#39;ultralytics/assets/bus.jpg&#39;</code><br>整体推理：<br><code>yolo task=detect mode=predict model=runs/detect/train/weights/best.pt conf=0.25 source=&#39;datasets/test/images&#39;</code></p><blockquote><p>关于 ultralytics 8.0.48<br>对于ultralytics 8.0.48 需要找到yolov8n.yaml，不能像8.1.X版本，用yolov8.yaml<br>并且<code>yolo detect train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True batch=16</code><br><code>yolo task=detect mode=train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True batch=2 workers=2</code><br><a href="https://github.com/OutBreak-hui/YoloV5-Flexible-and-Inference/issues/1">KeyError: ‘depth_multiple’ · Issue #1 · OutBreak-hui&#x2F;YoloV5-Flexible-and-Inference</a><br><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_2.6.png" alt="image.png"><br>一个重点报错！！使用以下命令行<code>yolo detect train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True batch=16</code><br>如果路径正确，却还报错路径找不到，说明 data.yaml 中没有使用绝对路径；或 yolo.yaml 文件 nc 没有写对；或文件命名有问题如 valid 写为 vaid</p></blockquote><!-- <div class="tabs" id="关于-ultralytics-8.0.48"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="关于-ultralytics-8.0.48-1">关于 ultralytics 8.0.48 1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="关于-ultralytics-8.0.48-1"><p>对于ultralytics 8.0.48 需要找到yolov8n.yaml，不能像8.1.X版本，用yolov8.yaml<br>并且<code>yolo detect train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True batch=16</code><br><code>yolo task=detect mode=train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True batch=2 workers=2</code><br><a href="https://github.com/OutBreak-hui/YoloV5-Flexible-and-Inference/issues/1">KeyError: ‘depth_multiple’ · Issue #1 · OutBreak-hui&#x2F;YoloV5-Flexible-and-Inference</a><br><img src="https://cdn.nlark.com/yuque/0/2024/png/22381734/1706325825017-1d15670a-1598-46db-9f07-8a13fc96677f.png#averageHue=%23272b2c&clientId=u6e79ff92-055a-4&from=paste&height=361&id=ubae11906&originHeight=451&originWidth=1142&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=55033&status=done&style=none&taskId=u57e63f15-cbe0-401f-ad06-2fdd70f59b5&title=&width=913.6" alt="image.png"><br>一个重点报错！！使用以下命令行<code>yolo detect train model=datasets/yolov8n.yaml data=datasets/data.yaml epochs=500 imgsz=640 resume=True batch=16</code><br>如果路径正确，却还报错路径找不到，说明 data.yaml 中没有使用绝对路径；或 yolo.yaml 文件 nc 没有写对；或文件命名有问题如 valid 写为 vaid</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div> --><h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><ol><li><a href="/Blog/2024/06/28/YOLOv8-%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/" title="YOLOv8 - 使用服务器训练模型">YOLOv8 - 使用服务器训练模型</a></li><li><a href="/Blog/2024/06/28/YOLOv8-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" title="YOLOv8 - 环境配置">YOLOv8 - 环境配置</a></li><li><a href="/Blog/2024/06/28/YOLOv8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B9%B6%E8%AE%AD%E7%BB%83/" title="YOLOv8 - 自定义数据集并训练">YOLOv8 - 自定义数据集并训练</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLOv8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv8 - 环境配置</title>
      <link href="/Blog/2024/06/28/YOLOv8-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/Blog/2024/06/28/YOLOv8-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\Blog\css\APlayer.min.css"><script src="\Blog\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\Blog\js\Meting.min.js"></script><blockquote><p>本文内容：在PyTorch虚拟环境中配置YOLOv8，进行每个步骤请仔细阅读本文档！</p></blockquote><h1 id="Anaconda的安装"><a href="#Anaconda的安装" class="headerlink" title="Anaconda的安装"></a>Anaconda的安装</h1><p>参考文档：<br><a href="https://zhuanlan.zhihu.com/p/511233749">Anaconda安装与Python环境搭建（不看后悔版）</a><br>anaconda清华源安装：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Index of &#x2F;anaconda&#x2F;archive&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><blockquote><p>注：本部分只安装 Anaconda</p></blockquote><h1 id="PyTorch的配置准备"><a href="#PyTorch的配置准备" class="headerlink" title="PyTorch的配置准备"></a>PyTorch的配置准备</h1><p>参考视频：<br><a href="https://www.bilibili.com/video/BV1fY411y7Xq/">【yolov8】从0开始搭建部署YOLOv8，环境安装+推理+自定义数据集搭建与训练，一小时掌握_哔哩哔哩_bilibili</a><br>注：本视频参考到23min即可，后面up的配置有一些问题</p><blockquote><p>需要下载的内容<br>① 首先在官网<code>https://pytorch.org/</code>查看pytorch支持的最高版本<br>② 不需要查看N卡系统支持最高的版本，下载CUDA版本会改变相关信息，此处不要被以上视频误导。<br>③ 权衡下载支持最高版本的CUDA和cuDNN（我下载的是CUDA_11.8，cuDNN下载11.）<br>CUDA工具包：<br><a href="https://developer.nvidia.cn/zh-cn/cuda-toolkit">https://developer.nvidia.cn/zh-cn/cuda-toolkit</a><br>CUDA_11.8下载网址:（若CUDA下载页面无法打开，可使用以下地址下载CUDA_11.8）<a href="https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_522.06_windows.exe">https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers&#x2F;cuda_11.8.0_522.06_windows.exe</a><br>cuDNN：<br><a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a><br>注：最后是<code>cudnn-windows-x86_64-8.9.7.29_cuda11-archive</code><br>④ 配置对应的环境变量<br>nvcc -V：查看版本CUDA</p></blockquote><h1 id="PyTorch的配置"><a href="#PyTorch的配置" class="headerlink" title="PyTorch的配置"></a>PyTorch的配置</h1><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://zhuanlan.zhihu.com/p/470841101">PyTorch 最新安装教程（2022-02-22）</a><br /><br>注1：其中配置清华源会导致 Anaconda Prompt 报错</p><blockquote><p>配置清华源报错解决方案将<code>C:/User/XXX/.condarc</code>中内容恢复为默认值:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">report_errors: false</span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure><p>或在 prompt 中运行：<code>conda config --remove-key channels</code><br />然后在 Anaconda Prompt 中输入命令：<code>conda clean -i</code><br />之后继续使用官网提供的命令下载 PyTorch 即可</p></blockquote><blockquote><p>可能可行的配置镜像源方案使用下文的方法三：可视化界面的方式配置镜像源<br><a href="https://blog.csdn.net/qq_32650831/article/details/127952502">Anaconda配置镜像源_anaconda镜像源配置-CSDN博客</a><br>若不可行，在 prompt 中运行：<code>conda config --remove-key channels</code></p></blockquote><p>注2：在使用官网提供的命令下载 PyTorch 中个别大文件下的较慢，请耐心等待。<br>注3：不要使用VPN。<br>注4：当下载完成后若 import torch 报错如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named ‘torch‘</span><br></pre></td></tr></table></figure><p>则参考以下文档：<br><a href="https://blog.csdn.net/thy0000/article/details/122652349">ModuleNotFoundError: No module named ‘torch‘ 解决方案_modulenotfounderror: no module named ’torch-CSDN博客</a></p><blockquote><p>先下载numpy     conda install numpy<br>再重新输入官网提供的命令下载PyTorch（不需要删除）</p></blockquote><h2 id="下载-拉取ultralytics-main"><a href="#下载-拉取ultralytics-main" class="headerlink" title="下载&#x2F;拉取ultralytics-main"></a>下载&#x2F;拉取ultralytics-main</h2><p><a href="https://github.com/ultralytics/ultralytics">https://github.com/ultralytics/ultralytics</a><br>release history：<a href="https://pypi.org/project/ultralytics/#history">https://pypi.org/project/ultralytics/#history</a></p><h2 id="为-ultralytics-main-配置虚拟环境"><a href="#为-ultralytics-main-配置虚拟环境" class="headerlink" title="为 ultralytics-main 配置虚拟环境"></a>为 ultralytics-main 配置虚拟环境</h2><p>将python项目解释器更换为刚刚创建好的虚拟环境<br><a href="https://blog.csdn.net/disccutter/article/details/124561073">在pycharm中设置Anaconda解释器_pycharm添加解释器anaconda-CSDN博客</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">print(torch.__version__)</span><br><span class="line">print(torch.cuda.is_available())</span><br><span class="line">print(torch.cuda.device_count())</span><br><span class="line">print(torch.backends.cudnn.version())</span><br><span class="line">print(torch.version.cuda)</span><br><span class="line">quit()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/ChuiXue-Lan/image-host/blob/main/blog-image/YOLOv8_1.1.png" alt="测试结果" title="测试结果"></p><h1 id="YOLOv8的配置"><a href="#YOLOv8的配置" class="headerlink" title="YOLOv8的配置"></a>YOLOv8的配置</h1><h2 id="参考视频："><a href="#参考视频：" class="headerlink" title="参考视频："></a>参考视频：</h2><p>参考视频：参考以下视频第四部分<br><a href="https://www.bilibili.com/video/BV1fY411y7Xq">【yolov8】从0开始搭建部署YOLOv8，环境安装+推理+自定义数据集搭建与训练，一小时掌握_哔哩哔哩_bilibili</a><br>在 Pycharm 终端中输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install ultralytics -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install yolo -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p><code>pip install X库==版本号 -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><h2 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h2><h3 id="推理测试"><a href="#推理测试" class="headerlink" title="推理测试"></a>推理测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用默认自带的一张图片进行测试</span><br><span class="line">yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source=&#x27;ultralytics/assets/bus.jpg&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>yolov8n.pt 需要自己下载，并放置在根目录中！</p></blockquote><blockquote><p>报错信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requests.exceptions.SSLError: HTTPSConnectionPool(host=&#x27;api.github.com&#x27;, port=443): Max retries exceeded with url: /repos/ultralytics/assets/releases/tags/v8.1.0 (Caused by SSLErro</span><br><span class="line">r(SSLZeroReturnError(6, &#x27;TLS/SSL connection has been closed (EOF) (_ssl.c:1135)&#x27;)))</span><br></pre></td></tr></table></figure><p>解决方法：关闭 VPN 代理。</p></blockquote><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><blockquote><p>可能出现的问题①<br>若出现以下报错：<br><code>Error: No such command &#39;task=detect&#39;.</code><br>最新解决方案（成功！！！）：<br />卸载ultralytics再重新安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall ultralytics</span><br><span class="line">pip install ultralytics -i https://pypi.tuna.tsinghua.edu.cn/simpl</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>解决方法（可能不成功）：<br /><a href="https://blog.csdn.net/Jiangdan0326/article/details/129626121">yolov8训练自己的数据集，报错：no such command ‘detect‘或者command ‘yolo‘ not found_yolo: command not found-CSDN博客</a><br>输入：python setup.py install 即可</p></blockquote><blockquote><p>若输入python setup.py install出现新报错：<br><code>can&#39;t open file &#39;setup.py&#39;: [Errno 2] No such file or directory</code><br>解决方法：未知</p></blockquote><blockquote><p>可能出现的问题②<br>问题：在输入终端命令进行推理时一直显示链接github超时<br />原因：没有下载好模型<br />解决方案：可以先到github中下载对应模型（也可以在超时信息中直接找到对应下载网址），再放置在根文件夹下（注意不要放在子文件夹中！）</p></blockquote><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://raw.githubusercontent.com/ChuiXue-Lan/image-host/main/blog-image/YOLOv8_1.2.png" alt="推理测试成功结果" title="推理测试成功结果"></p><h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><ol><li><a href="/Blog/2024/06/28/YOLOv8-%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/" title="YOLOv8 - 使用服务器训练模型">YOLOv8 - 使用服务器训练模型</a></li><li><a href="/Blog/2024/06/28/YOLOv8-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/" title="YOLOv8 - 环境配置">YOLOv8 - 环境配置</a></li><li><a href="/Blog/2024/06/28/YOLOv8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E9%9B%86%E5%B9%B6%E8%AE%AD%E7%BB%83/" title="YOLOv8 - 自定义数据集并训练">YOLOv8 - 自定义数据集并训练</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Vision </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOLOv8 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
